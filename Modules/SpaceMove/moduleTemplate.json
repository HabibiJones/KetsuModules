{
    "moduleInfo": {
      "moduleName": "SpaceMov",
      "moduleInitials": "SM",
      "moduleDesc": "A module for watching Movies and Tv-Show",
      "developer": "Danyspb4ever",
      "moduleID": "131441564565",
      "moduleImage": "https://i.postimg.cc/fTkrNh5s/space.png",
      "moduleVersion": 1.33,
      "moduleLenguage": "ENG",
      "moduleType": "Video",
      "baseURL": "https://spacemov.site/",
      "moduleDeveloperSite": "https://github.com/Danyspb/Modules-Ketsu/tree/main/spacemove",
      "UpdateSite": "https://raw.githubusercontent.com/Danyspb/Modules-Ketsu/main/spacemove/moduleTemplate.json",
      "preferedServer": "",
      "preferedDownloadServer": "",
      "blackListed": [
        ""
      ]
    },
    "global": {
      "variables": [
        {
          "key": "",
          "value": ""
        }
      ],
      "cookies": [
        {
          "key": "",
          "value": ""
        }
      ],
      "headers": [
        {
          "key": "",
          "value": ""
        }
      ]
    },
    "mainPage": [
     {
        "request": {
          "url": "https://spacemov.site/",
          "method": "get",
          "headers": [
            {
              "key": "",
              "value": ""
            }
          ],
          "httpBody": null
        },
        "extra": {
          "commands": [
            {
              "commandName": "",
              "params": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            }
          ],
          "extraInfo": [
            {
              "key": "",
              "value": ""
            }
          ]
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": " const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal6 : 'normal6', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' }; const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width, height) { this.width = width; this.height = height; } function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image, title, description, field1, field2, field3, field4, isChapter, link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link,image,title,field1) { return new Data(image,title,'unknown',field1,'unknown','unknown','unknown',false,link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = []; var donnes = []; let emptyKeyValue = [new KeyValue('','')]; var founs = document.querySelectorAll('.dtw_content.dt_views_count article'); for (f of founs){ var link = f.querySelector('a').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); var image = f.querySelector('.image img ').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = f.querySelector('.image img ').alt.trim(); var quality = f.querySelector('a div div span').textContent.trim(); var annee = f.querySelector('a div div span').textContent.trim(); donnes.push(new Data(image, '', quality,title,annee,'','',false,link)); } var donnes1 = []; var check = document.querySelectorAll('.items.normal')[0]; var film = check.querySelectorAll('article'); for (f of film){ var link = f.querySelector('.poster > a').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); var image = f.querySelector('.poster > img').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = f.querySelector('.poster > img').alt; var quali = f.querySelector('span').textContent; var dat = f.querySelector('.data span').textContent.trim(); var fil = new Data(image, title, '',dat,quali,'','',false,link); donnes1.push(fil); } var donnes2 = []; var chercher = document.querySelectorAll('.items.normal')[1]; var serie = chercher.querySelectorAll('article'); for (s of serie){ var link = s.querySelector('.poster > a').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); var image = s.querySelector('.poster > img').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = s.querySelector('.poster > img').alt; var dat = s.querySelector('.data span').textContent.trim(); var ser = new Data(image, title, '',dat,'','','',false,link); donnes2.push(ser); } let layout = new Layout(new Insets(0, 0, 0, 0), 1, 1, 1, 1, 0, new Size(430, 105), new Ratio('width', 6, 10), new Size(0, 0), 0, 0); output.push(new Output(CellDesings.Special3, Orientation.horizontal, DefaultLayouts.wideStrechedFull, Paging.leading,new Section('', true), layout, donnes)); output.push(new Output(CellDesings.normal1, Orientation.horizontal, DefaultLayouts.longTripletsDouble, Paging.leading, new Section('Latest Movies Added :', true), null, donnes1)); output.push(new Output(CellDesings.normal1, Orientation.horizontal, DefaultLayouts.longTripletsDouble, Paging.leading, new Section('New Series Updated :', true), null, donnes2)); let MainPageObject = new MainPage(new ModuleRequest('','get',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),new JavascriptConfig(true,false,''),output); var finalJson = JSON.stringify(MainPageObject); savedData.innerHTML = finalJson; "
        },
        "output": [
          {
            "cellDesing": "normal1",
            "orientation": "vertical",
            "defaultLayout": "wide",
            "paging": "",
            "section": {
              "sectionName": "",
              "separator": false
            },
            "layout": {
              "insets": {
                "top": 0,
                "bottom": 0,
                "left": 0,
                "right": 0
              },
              "visibleCellsWidthS": 2,
              "visibleCellsWidthM": 2,
              "visibleCellsWidthL": 2,
              "visibleCellsHeight": 2,
              "heightForVisibleCells": 400,
              "cellSize": {
                "width": 300,
                "height": 300
              },
              "ratio": {
                "inRelation": "width",
                "number1": 1,
                "number2": 2
              },
              "constant": {
                "width": 1,
                "height": 2
              },
              "horizontalSpacing": 0,
              "verticalSpacing": 0
            },
            "data": [
              {
                "image": {
                  "url": "",
                  "method": "get",
                  "headers": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ],
                  "httpBody": null
                },
                "title": "",
                "description": "",
                "field1": "",
                "field2": "",
                "field3": "",
                "field4": "",
                "openInWebView" : false,
                "isChapter": false,
                "link": {
                  "url": "",
                  "method": "",
                  "headers": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ],
                  "httpBody": null
                }
              }
            ]
          }
        ]
      } 
    ],
    "search": [
      {
        "request": {
          "url": "https://spacemov.site/page/<page>/?s=<searched>",
          "method": "get",
          "headers": [
            {
              "key": "",
              "value": ""
            }
          ],
          "httpBody": null
        },
        "separator": "+",
        "extra": {
          "commands": [
            {
              "commandName": "",
              "params": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            }
          ],
          "extraInfo": [
            {
              "key": "",
              "value": ""
            }
          ]
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": " const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal6 : 'normal6', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' }; const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function Search(request,extra,separator,javascriptConfig,output) { this.request = request; this.extra = extra; this.separator = separator; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url,method,headers,httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands,extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName,params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript,loadInWebView,javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key,value) { this.key = key; this.value = value; } function Output(cellDesing,orientation,defaultLayout,paging,section,layout,data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName,separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top,bottom,left,right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width,height) { this.width = width; this.height = height; } function Ratio(inRelation,number1,number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image,title,description,field1,field2,field3,field4,isChapter,link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link,image,title,field1) { return new Data(image,title,'unknown',field1,'unknown','unknown','unknown',false,link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = []; let emptyKeyValue = [new KeyValue('','')]; var donnees = []; var rec = document.querySelectorAll('.search-page .result-item > article'); for (un of rec) { var link = un.querySelector('.thumbnail.animation-2 a').href; var image = un.querySelector('.thumbnail.animation-2 > a > img').src; var title = un.querySelector('.thumbnail.animation-2 > a > img').alt.trim(); var synap = un.querySelector('.details .contenido p').textContent.trim(); var type = un.querySelector('.thumbnail.animation-2 a span').textContent.trim(); var anne = un.querySelector('.details .meta :nth-child(2)').textContent.trim(); link = new ModuleRequest(link, 'get', emptyKeyValue, null); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var finalData = new Data(image, title, synap, anne, type, '', '', false, link);; donnees.push(finalData); } var testLayout = new Layout(new Insets(10, 10, 10, 10), 1, 2, 3, 1, 500, new Size(400, 400), new Ratio('width', 4, 11), new Size(0, 0), 10, 10); output.push(new Output(CellDesings.wide11, Orientation.vertical, DefaultLayouts.none, Paging.none, new Section('', false), testLayout, donnees)); let searchPageObject = new Search(new ModuleRequest('','',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),'',new JavascriptConfig(true,false,''),output); var finalJson = JSON.stringify(searchPageObject); savedData.innerHTML = finalJson;"
        },
        "output": [
          {
            "cellDesing": "normal1",
            "orientation": "vertical",
            "defaultLayout": "wide",
            "paging": "",
            "section": {
              "sectionName": "",
              "separator": false
            },
            "layout": {
              "insets": {
                "top": 0,
                "bottom": 0,
                "left": 0,
                "right": 0
              },
              "visibleCellsWidthS": 2,
              "visibleCellsWidthM": 2,
              "visibleCellsWidthL": 2,
              "visibleCellsHeight": 2,
              "heightForVisibleCells": 400,
              "cellSize": {
                "width": 300,
                "height": 300
              },
              "ratio": {
                "inRelation": "width",
                "number1": 1,
                "number2": 2
              },
              "constant": {
                "width": 1,
                "height": 2
              },
              "horizontalSpacing": 0,
              "verticalSpacing": 0
            },
            "data": [
              {
                "image": {
                  "url": "",
                  "method": "get",
                  "headers": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ],
                  "httpBody": null
                },
                "title": "",
                "description": "",
                "field1": "",
                "field2": "",
                "field3": "",
                "field4": "",
                "openInWebView" : false,
                "isChapter": false,
                "link": {
                  "url": "empty",
                  "method": "get",
                  "headers": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "httpBody": null
                }
              }
            ]
          }
        ]
      }
    ],
    "info": [
      {
        "request": {
          "url": "",
          "method": "get",
          "headers": [
            {
              "key": "",
              "value": ""
            }
          ],
          "httpBody": null
        },
        "extra": {
          "commands": [
            {
              "commandName": "",
              "params": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            }
          ],
          "extraInfo": [
            {
              "key": "",
              "value": ""
            }
          ]
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": "function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Chapter(chapName, link, openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView; } function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters; } function getStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return data.replace(match, '').trim(); } } } function getHtmlStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return array[x]; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let emptyKeyValue = [new KeyValue('', '')]; var episodes = []; var lang = 'ENG'; var status = 'Unknown'; var genres = []; var desc = document.querySelector('.wp-content').textContent.replaceAll('\\n', '').trim(); var image = document.querySelector('.poster > img').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = document.querySelector('.poster > img').alt; genres = Array.from(document.querySelectorAll('.sgeneros > a')).map(g => g.textContent.trim()); if (parsedJson.request.url.includes('tvseries')) { type = 'TV Series'; var donnes = document.querySelectorAll('#seasons > .se-c .se-a .episodios > li'); for (epi of donnes) { var link = epi.querySelector('.episodiotitle > a').href; tout = epi.querySelector('.numerando').textContent.replaceAll('\\n', '').trim(); var sai = `Saison ${tout}`; var saison = sai.replace('-', 'Episode').replaceAll('\\n', ''); var chapitre = new Chapter(saison, new ModuleRequest(link, 'get', emptyKeyValue, null), false); episodes.push(chapitre); } } if (parsedJson.request.url.includes('movies')) { type = 'Movies'; var chapitre = new Chapter(title, new ModuleRequest(parsedJson.request.url, 'get', emptyKeyValue, null), false); episodes.push(chapitre); } let infoPageObject = new Info(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output(image, title, parsedJson.request, desc, genres, status, type, lang, 'Eps: ' + episodes.length, episodes)); var finalJson = JSON.stringify(infoPageObject); savedData.innerHTML = finalJson;"
        },
        "output": {
          "image": {
            "url": "",
            "method": "get",
            "headers": [
              {
                "key": "",
                "value": ""
              }
            ],
            "httpBody": null
          },
          "link": {
            "url": "",
            "method": "get",
            "headers": [
              {
                "key": "",
                "value": ""
              }
            ],
            "httpBody": null
          },
          "title": "",
          "description": "",
          "genres": [
            ""
          ],
          "field1": "",
          "field2": "",
          "field3": "",
          "field4": "",
          "chapters": [
            {
              "chapName": "",
              "openInWebView": false,
              "link": {
                "url": "empty",
                "method": "get",
                "headers": [
                  {
                    "key": "key",
                    "value": "value"
                  }
                ],
                "httpBody": null
              }
            }
          ]
        }
      }
    ],
    "chapters": [
      {
        "request": {
          "url": "",
          "method": "get",
          "headers": [
            {
              "key": "key",
              "value": "value"
            }
          ],
          "httpBody": null
        },
        "extra": {
          "commands": [
            {
              "commandName": "",
              "params": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            }
          ],
          "extraInfo": [
            {
              "key": "",
              "value": ""
            }
          ]
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": "function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output( videos, images, text) { this.videos = videos; this.images = images; this.text = text;}function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo;}function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link;}function RawVideo(video) { this.video = video;}function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getFile(url){ var xhr = new XMLHttpRequest(); xhr.open('get', url, false); xhr.send(); return xhr.responseText;}function Text(text) { this.text = text;}var output = [];var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)];var serveur = document.querySelectorAll('iframe');for(s of serveur){ var link = s.src; output.push(new NeedsResolver('', new ModuleRequest(link, 'get', emptyKeyValue, null)));}let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);var chaptersObject = new Chapters(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(new Videos(output, null), null, null));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
          "videos": {
            "needsResolver": [
              {
                "resolverIdentifier": "",
                "link": {
                  "url": "",
                  "method": "get",
                  "headers": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "httpBody": null
                }
              }
            ],
            "rawVideo": [
              {
                "video": [
                  {
                    "videoQuality": "",
                    "videoLink": {
                      "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                      "method": "get",
                      "headers": [
                        {
                          "key": "key",
                          "value": "value"
                        }
                      ],
                      "httpBody": null
                    }
                  }
                ]
              }
            ]
          },
          "images": [
            {
              "url": "empty",
              "method": "get",
              "headers": [
                {
                  "key": "key",
                  "value": "value"
                }
              ],
              "httpBody": null
            }
          ],
          "text": {
            "text": ""
          }
        }
      }
    ],
    "moduleResolvers": [
      {
        "resolverInfo": {
          "resolverName": "",
          "nameMatches": [
            ""
          ],
          "developer": "",
          "moduleID": "",
          "resolverVersion": 1,
          "baseURL": ""
        },
        "resolver": [
          {
            "request": {
              "url": "",
              "method": "get",
              "headers": [
                {
                  "key": "key",
                  "value": "value"
                }
              ],
              "httpBody": null
            },
            "extra": {
              "commands": [
                {
                  "commandName": "",
                  "params": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ]
                }
              ],
              "extraInfo": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            },
            "javascriptConfig": {
              "removeJavascript": false,
              "loadInWebView": false,
              "javaScript": ""
            },
            "output": {
              "moduleID": "",
              "video": [
                {
                  "videoQuality": "720",
                  "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [
                      {
                        "key": "key",
                        "value": "value"
                      }
                    ],
                    "httpBody": null
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "resolverInfo": {
          "resolverName": "HLSPANEL",
          "nameMatches": [
            "HLSPANEL"
          ],
          "developer": "ナビル",
          "moduleID": "3544445456435432165",
          "resolverVersion": 1.02,
          "baseURL": "http://hlsplayer.xyz/"
        },
        "resolver": [
          {
            "request": {
              "url": "empty",
              "method": "get",
              "headers": [
                {
                  "key": "key",
                  "value": "value"
                }
              ],
              "httpBody": null
            },
            "extra": {
              "commands": [
                {
                  "commandName": "",
                  "params": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ]
                }
              ],
              "extraInfo": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            },
            "javascriptConfig": {
              "removeJavascript": true,
              "loadInWebView": false,
              "javaScript": "function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(video) { this.video = video;}function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getNext(match, array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } }}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url),new KeyValue('X-Requested-With', 'XMLHttpRequest')];var videos = [];const id = parsedJson.request.url.split('/').pop();const link = `https://hlspanel.xyz/player/index.php?data=${id}&do=getVideo`;let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);var chaptersObject = new Resolver(new ModuleRequest(link, 'post', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
            },
            "output": {
              "moduleID": "",
              "video": [
                {
                  "videoQuality": "720",
                  "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [
                      {
                        "key": "key",
                        "value": "value"
                      }
                    ],
                    "httpBody": null
                  }
                }
              ]
            }
          },
          {
            "request": {
              "url": "empty",
              "method": "get",
              "headers": [
                {
                  "key": "key",
                  "value": "value"
                }
              ],
              "httpBody": null
            },
            "extra": {
              "commands": [
                {
                  "commandName": "",
                  "params": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ]
                }
              ],
              "extraInfo": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            },
            "javascriptConfig": {
              "removeJavascript": true,
              "loadInWebView": false,
              "javaScript": " function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function getNext(match, array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = parsedJson.request.headers; var videos = []; const json = JSON.parse(document.querySelector('script').innerText.replace('/*', '').replace('*/', '')); const videoLink = json.videoSource; const secours = json.securedLink; videos.push(new Video('master.txt', new ModuleRequest(videoLink, 'get', emptyKeyValue, null))); videos.push(new Video('secours', new ModuleRequest(secours, 'get', emptyKeyValue, null))); let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var chaptersObject = new Resolver(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;"
            },
            "output": {
              "moduleID": "",
              "video": [
                {
                  "videoQuality": "720",
                  "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [
                      {
                        "key": "key",
                        "value": "value"
                      }
                    ],
                    "httpBody": null
                  }
                }
              ]
            }
          }
        ]
      }    
    ],
    "responseCodeFunctions": [
      {
        "code": 0,
        "msgTitle": "",
        "msgBody": "",
        "type": "normal",
        "functions": [
          {
            "request": {
              "url": "empty",
              "method": "get",
              "headers": [
                {
                  "key": "key",
                  "value": "value"
                }
              ],
              "httpBody": null
            },
            "extra": {
              "commands": [
                {
                  "commandName": "",
                  "params": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ]
                }
              ],
              "extraInfo": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            },
            "javascriptConfig": {
              "removeJavascript": true,
              "loadInWebView": false,
              "javaScript": ""
            }
          }
        ]
      }
    ],
    "helperFunctions": [
      {
        "functionName": "example",
        "msgTitle": "",
        "msgBody": "",
        "type": "normal",
        "functions": [
          {
            "request": {
              "url": "empty",
              "method": "get",
              "headers": [
                {
                  "key": "key",
                  "value": "value"
                }
              ],
              "httpBody": null
            },
            "extra": {
              "commands": [
                {
                  "commandName": "",
                  "params": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ]
                }
              ],
              "extraInfo": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            },
            "javascriptConfig": {
              "removeJavascript": true,
              "loadInWebView": false,
              "javaScript": ""
            }
          }
        ]
      }
    ]
  }
  
